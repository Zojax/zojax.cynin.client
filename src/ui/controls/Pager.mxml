<?xml version="1.0" encoding="utf-8"?>
<!--
###############################################################################
#cyn.in is an open source Collaborative Knowledge Management Appliance that 
#enables teams to seamlessly work together on files, documents and content in 
#a secure central environment.
#
#cyn.in v2 an open source appliance is distributed under the GPL v3 license 
#along with commercial support options.
#
#cyn.in is a Cynapse Invention.
#
#Copyright (C) 2008 Cynapse India Pvt. Ltd.
#
#This program is free software: you can redistribute it and/or modify it under
#the terms of the GNU General Public License as published by the Free Software 
#Foundation, either version 3 of the License, or any later version and observe 
#the Additional Terms applicable to this program and must display appropriate 
#legal notices. In accordance with Section 7(b) of the GNU General Public 
#License version 3, these Appropriate Legal Notices must retain the display of 
#the "Powered by cyn.in" AND "A Cynapse Invention" logos. You should have 
#received a copy of the detailed Additional Terms License with this program.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of 
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
#Public License for more details.
#
#You should have received a copy of the GNU General Public License along with 
#this program.  If not, see <http://www.gnu.org/licenses/>.
#
#You can contact Cynapse at support@cynapse.com with any problems with cyn.in. 
#For any queries regarding the licensing, please send your mails to 
# legal@cynapse.com
#
#You can also contact Cynapse at:
#802, Building No. 1,
#Dheeraj Sagar, Malad(W)
#Mumbai-400064, India
###############################################################################
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" y="42" right="10"  
	borderStyle="solid" borderThickness="0" cornerRadius="0" width="220" height="24" 
	horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:control="ui.controls.*"
	currentStateChange="handleStateChange(event)" 
	 styleName="pagerbg" creationComplete="inited()">
	<mx:states>
		<mx:State name="pageedit">
			<mx:SetProperty target="{lblPageNumber}" name="visible" value="false"/>
			<mx:SetProperty target="{lblOfCount}" name="visible" value="true"/>
			<mx:SetProperty target="{txtNewpageNumber}" name="visible" value="true"/>
			<mx:SetProperty target="{txtNewpageNumber}" name="styleName" value="PageInput"/>
			<mx:SetProperty target="{lblOfCount}" name="width" value="42"/>
			<mx:SetStyle target="{lblOfCount}" name="horizontalCenter" value="24"/>
			<mx:SetProperty target="{lblOfCount}" name="styleName" value="PagerTxtSmall"/>
			<mx:SetProperty target="{lblOfCount}" name="alpha" value=".9"/>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import mx.events.StateChangeEvent;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.IndexChangedEvent;
			import model.logger.Logger;
			import model.updates.PageEvent;
			import model.updates.updatemodel;
			
			[Bindable] private var _ofcount:String = "";
			
			private function inited():void
			{
				ChangeWatcher.watch(updatemodel.instance,"_pageCount",handlePageCountChange);
				ChangeWatcher.watch(updatemodel.instance,"PageNumber",handlePageCountChange);
			}
			private function handlePageCountChange(event:Event):void
			{
				if (updatemodel.instance != null && ! isNaN(updatemodel.instance._pageCount) && ! isNaN(updatemodel.instance.PageNumber))
				{
					Logger.instance.log("Page Count changed. Pagenum=" + updatemodel.instance.PageNumber + ", pagecount="+updatemodel.instance._pageCount,Logger.SEVERITY_NORMAL);
					lblPageNumber.text = updatemodel.instance.PageNumber + ' of ' + updatemodel.instance._pageCount;
					lblOfCount.text =  ' of ' + updatemodel.instance._pageCount;
				} 
				handleEnableButtons();
				
			}
			private function handleEnableButtons():void
			{
				btnLast.enabled = updatemodel.instance._pageCount != updatemodel.instance.PageNumber && updatemodel.instance._pageCount > 0;
				btnOlder.enabled =  btnLast.enabled;
				btnNewer.enabled = updatemodel.instance.PageNumber != 1 && updatemodel.instance._pageCount > 0 && updatemodel.instance.PageNumber > 0;
				btnFirst.enabled =  btnNewer.enabled;
				lblPageNumber.visible = updatemodel.instance._pageCount > 0;
				lblOfCount.visible= updatemodel.instance._pageCount > 0 && currentState == "pageedit";
				txtNewpageNumber.visible = lblOfCount.visible && currentState == "pageedit";
			}
			
			private function handlePageClick():void
			{
//				if (txtNewpageNumber != null)
//				{
//					popuplatePageText();
//				}
//				currentState = "pageedit";
			}
			private function popuplatePageText():void
			{
				txtNewpageNumber.text = updatemodel.instance.PageNumber.toString();
				selectAll();
			}
			private function selectAll():void
			{
				//txtNewpageNumber.setSelection(0,txtNewpageNumber.text.length - 1);
				//stacker.instanceStack.nativeWindow.activate();
				//stacker.instanceStack.activate();
				//txtNewpageNumber.setFocus();
				//txtNewpageNumber.selectionBeginIndex = 0;
				//txtNewpageNumber.selectionEndIndex = txtNewpageNumber.text.length - 1;
			}
			
			private function handleStateChange(event:StateChangeEvent):void
			{
				if (event.newState == "pageedit")
				{
					stacker.instanceStack.focusManager.setFocus(txtNewpageNumber);
				}
				else
				{
					stacker.instanceStack.setFocus();
				}
			}
			private function handleTextKeyPress(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					approvePageNumEdit();
				}
			}
			private function approvePageNumEdit():void
			{
				currentState = "";
				if (isNaN(parseInt(txtNewpageNumber.text)))
				{
					Logger.instance.log("NaN entered by user, " + num,Logger.SEVERITY_SERIOUS);
					return; 
				}
				else
				{
					var num:int = parseInt(txtNewpageNumber.text);
					if (num <= 0 || num > updatemodel.instance.PageCount)
					{
						Logger.instance.log("Invalid page number entered by user, " + num,Logger.SEVERITY_SERIOUS);
					}
					else
					{
						updatemodel.instance.PageNumber = num;
					}
				}
			}
		]]>
	</mx:Script>
	<mx:Button id="btnFirst" click="updatemodel.instance.PageNumber=1" styleName="PagerFirst" 
		verticalCenter="0" left="7"  buttonMode="false" enabled="false"/>
	<mx:Button id="btnNewer" click="updatemodel.instance.decrementPageNumber();" styleName="PagerLeft" 
		left="36" verticalCenter="0"  buttonMode="false" enabled="false"/>
	<mx:Button id="btnOlder" click="updatemodel.instance.incrementPageNumber()" styleName="PagerRight" 
		right="36" verticalCenter="0" buttonMode="false"/>
	<mx:Button id="btnLast"  click="updatemodel.instance.PageNumber= updatemodel.instance.PageCount" 
		styleName="PagerLast" right="7" verticalCenter="0" buttonMode="false"/>
	<mx:Text text="1" id="lblPageNumber"
		verticalCenter="0" width="90" horizontalCenter="0" textAlign="center" click="handlePageClick()" styleName="PagerTxt"/>
	<mx:Label horizontalCenter="20" verticalCenter="0"  
		id="lblOfCount" color="white" visible="false"/>
	<mx:TextInput horizontalCenter="-20" verticalCenter="0" width="46" id="txtNewpageNumber" visible="false" buttonMode="true" 
		keyUp="handleTextKeyPress(event)"
		/>
</mx:Canvas>
